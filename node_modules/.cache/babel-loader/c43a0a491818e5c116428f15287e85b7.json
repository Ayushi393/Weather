{"ast":null,"code":"var _jsxFileName = \"/home/aditya/Desktop/weatherApp-Reactjs-master/src/currentLocation.js\";\nimport React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nconst dateBuilder = d => {\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  const day = days[d.getDay()];\n  const date = d.getDate();\n  const month = months[d.getMonth()];\n  const year = d.getFullYear();\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true\n};\n\nclass Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: undefined,\n      lon: undefined,\n      errorMessage: undefined,\n      temperatureC: undefined,\n      temperatureF: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      icon: \"CLEAR_DAY\",\n      sunrise: undefined,\n      sunset: undefined,\n      errorMsg: undefined\n    };\n\n    this.getPosition = options => {\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n      });\n    };\n\n    this.getWeather = async (lat, lon) => {\n      try {\n        const apiKey = 'd9483472d1b24148d8a4c7673484ea585'; // Replace with your actual API key\n\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;\n        const response = await fetch(apiUrl);\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          console.error('Weather data not found:', errorData);\n          throw new Error(`Error: ${errorData.message} (Code: ${errorData.cod})`);\n        }\n\n        const data = await response.json(); // Process your weather data here, e.g., update state or display it\n\n        console.log(data);\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition().then(position => {\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n      }).catch(err => {\n        this.getWeather(28.67, 77.22); // Fallback to default location\n\n        alert(\"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\");\n      });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(() => this.getWeather(this.state.lat, this.state.lon), 600000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  setWeatherIcon(main) {\n    switch (main) {\n      case \"Haze\":\n        this.setState({\n          icon: \"CLEAR_DAY\"\n        });\n        break;\n\n      case \"Clouds\":\n        this.setState({\n          icon: \"CLOUDY\"\n        });\n        break;\n\n      case \"Rain\":\n        this.setState({\n          icon: \"RAIN\"\n        });\n        break;\n\n      case \"Snow\":\n        this.setState({\n          icon: \"SNOW\"\n        });\n        break;\n\n      case \"Dust\":\n      case \"Tornado\":\n        this.setState({\n          icon: \"WIND\"\n        });\n        break;\n\n      case \"Drizzle\":\n        this.setState({\n          icon: \"SLEET\"\n        });\n        break;\n\n      case \"Fog\":\n      case \"Smoke\":\n        this.setState({\n          icon: \"FOG\"\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: \"CLEAR_DAY\"\n        });\n    }\n  }\n\n  render() {\n    if (this.state.errorMsg) {\n      return /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 14\n        }\n      }, this.state.errorMsg);\n    }\n\n    if (this.state.temperatureC) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"city\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }\n      }, this.state.city), /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }\n      }, this.state.country)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ReactAnimatedWeather, {\n        icon: this.state.icon,\n        color: defaults.color,\n        size: defaults.size,\n        animate: defaults.animate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }\n      }, this.state.main)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"date-time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dmy\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"txt\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"current-time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Clock, {\n        format: \"HH:mm:ss\",\n        interval: 1000,\n        ticking: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"current-date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, dateBuilder(new Date()))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"temperature\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }\n      }, this.state.temperatureC, \"\\xB0\", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 45\n        }\n      }, \"C\"))))), /*#__PURE__*/React.createElement(Forcast, {\n        icon: this.state.icon,\n        weather: this.state.main,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: loader,\n        style: {\n          width: \"50%\",\n          WebkitUserDrag: \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"white\",\n          fontSize: \"22px\",\n          fontWeight: \"600\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }\n      }, \"Detecting your location\"), /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"white\",\n          marginTop: \"10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }\n      }, \"Your current location will be displayed on the App \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 64\n        }\n      }), \"& used for calculating Real time weather.\"));\n    }\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["/home/aditya/Desktop/weatherApp-Reactjs-master/src/currentLocation.js"],"names":["React","apiKeys","Clock","Forcast","loader","ReactAnimatedWeather","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","Weather","Component","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","city","country","humidity","description","icon","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","apiKey","apiUrl","response","fetch","ok","errorData","json","console","error","Error","message","cod","data","log","componentDidMount","then","position","coords","latitude","longitude","catch","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","setWeatherIcon","main","setState","render","Date","width","WebkitUserDrag","fontSize","fontWeight","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nconst dateBuilder = (d) => {\n  const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\",\n  ];\n  const days = [\n    \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\",\n  ];\n\n  const day = days[d.getDay()];\n  const date = d.getDate();\n  const month = months[d.getMonth()];\n  const year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\n\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          this.getWeather(28.67, 77.22); // Fallback to default location\n          alert(\"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\");\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(() => this.getWeather(this.state.lat, this.state.lon), 600000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  getPosition = (options) => {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  // getWeather = async (lat, lon) => {\n  //   try {\n  //     const api_call = await fetch(`${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`);\n  //     const data = await api_call.json();\n\n  //     // Check if the API response is valid\n  //     if (data && data.main) {\n  //       this.setState({\n  //         lat: lat,\n  //         lon: lon,\n  //         city: data.name,\n  //         temperatureC: Math.round(data.main.temp),\n  //         temperatureF: Math.round(data.main.temp * 1.8 + 32),\n  //         humidity: data.main.humidity,\n  //         main: data.weather[0].main,\n  //         country: data.sys.country,\n  //         // Add sunrise and sunset if needed\n  //       });\n\n  //       // Set weather icon based on the main weather condition\n  //       this.setWeatherIcon(data.weather[0].main);\n  //     } else {\n  //       this.setState({ errorMsg: \"Unable to fetch weather data.\" });\n  //       console.error(\"Weather data not found\", data);\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Error fetching weather data:\", error);\n  //     this.setState({ errorMsg: \"Error fetching weather data.\" });\n  //   }\n  // };\n\n   getWeather = async (lat, lon) => {\n    try {\n      const apiKey = 'd9483472d1b24148d8a4c7673484ea585'; // Replace with your actual API key\n      const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;\n  \n      const response = await fetch(apiUrl);\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Weather data not found:', errorData);\n        throw new Error(`Error: ${errorData.message} (Code: ${errorData.cod})`);\n      }\n  \n      const data = await response.json();\n      // Process your weather data here, e.g., update state or display it\n      console.log(data);\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n  };\n  \n\n  setWeatherIcon(main) {\n    switch (main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  }\n\n  render() {\n    if (this.state.errorMsg) {\n      return <h3 style={{ color: \"red\" }}>{this.state.errorMsg}</h3>;\n    }\n\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}°<span>C</span>\n                </p>\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location will be displayed on the App <br />\n            & used for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}